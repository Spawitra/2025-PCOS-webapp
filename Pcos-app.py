import streamlit as st 
import pandas as pd
import joblib
import numpy as np
import os
import plotly.graph_objects as go
from PIL import Image

# ========== CSS Custom ==========
st.markdown("""
<style>
    .main {background-color: #f9f9fb;}
    h1, h2, h3 {color: #4B0082;}
    .stButton>button {
        background: linear-gradient(to right, #6a11cb, #2575fc);
        color: white;
        border-radius: 12px;
        padding: 0.6em 1.2em;
        font-weight: bold;
    }
    .stButton>button:hover {
        background: linear-gradient(to right, #2575fc, #6a11cb);
        transform: scale(1.05);
    }
    .risk-card {
        background-color: #ffffff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0px 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
</style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
model = joblib.load("PcosApp.joblib")

def load_image(path):
    if os.path.exists(path):
        return Image.open(path)
    else:
        st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û: {path}")
        return None

HairG = load_image("hairgrowP.jpg")
Skindarken = load_image("skin darkenP.jpg")

# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
features = [
    'Age (yrs)', 'Weight (Kg)', 'Cycle(R/I)', 'Cycle length(days)',
    'hair growth(Y/N)', 'Skin darkening (Y/N)', 'Pimples(Y/N)',
    'Fast food (Y/N)', 'Follicle No. (L)', 'Follicle No. (R)', 'Weight gain(Y/N)'
]
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
def preprocess_input(values):
    processed = []
    for f, v in zip(features, values):
        if isinstance(v, str):
            v = v.strip().upper()
            if v in ["Y", "YES", "1"]: 
                processed.append(1)
            elif v in ["N", "NO", "0"]: 
                processed.append(0)
            elif v in ["R"]: 
                processed.append(1)
            elif v in ["I"]: 
                processed.append(0)
            else:
                try:
                    processed.append(float(v))
                except:
                    processed.append(0)
        else:
            processed.append(v)
    return np.array(processed).reshape(1, -1)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
def predict_risk(age, weight, cycle_ri, cycle_length, hair_growth, skin_dark, pimples,
                 fast_food, foll_l, foll_r, weight_gain):
     values = [age, weight, cycle_ri, cycle_length, hair_growth, skin_dark, pimples,
               fast_food, foll_l, foll_r, weight_gain]
     X = preprocess_input(values)
     prob = model.predict_proba(X)[0][1] * 100
     if prob < 33:
         risk = "‡∏ï‡πà‡∏≥"
     elif prob < 66:
         risk = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
     else:
         risk = "‡∏™‡∏π‡∏á"
     return risk, prob



# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = joblib.load("PcosApp.joblib")

# Sidebar
st.sidebar.title("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
st.sidebar.warning("‚ö†Ô∏è ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå")
st.sidebar.warning("‡∏´‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏£‡∏µ‡πÄ‡∏ß‡∏ä ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏ï‡∏¥-‡∏ô‡∏£‡∏µ‡πÄ‡∏ß‡∏ä ‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô ")
st.sidebar.markdown("[‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡∏†‡∏≤‡∏ß‡∏∞ PCOS](https://www.bangkokhospital.com/content/overweight)")

# ========== Main UI ==========
st.title("üß¨ PCOS Risk Self-Assessment")
st.markdown("### ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏†‡∏≤‡∏ß‡∏∞‡∏ñ‡∏∏‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏±‡∏á‡πÑ‡∏Ç‡πà‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö ")

with st.container():
    st.markdown('<div class="risk-card">', unsafe_allow_html=True)
    col1, col2, col3= st.columns(3)
    with col1:
        age = st.number_input("Age (yrs) ‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", min_value=10, max_value=60, value=25)
        weight = st.number_input("Weight (Kg) ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°) ", min_value=30, max_value=200, value=60)
        cycle_ri = st.radio("üîÑ Cycle ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (R ‡∏õ‡∏Å‡∏ï‡∏¥ /I‡πÑ‡∏°‡πà‡∏õ‡∏Å‡∏ï‡∏¥ )", ["R", "I"])
        cycle_length = st.number_input("üóìÔ∏è Cycle length (days) ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô", min_value=1, max_value=31, value=7)
        #st.error("‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà 1-15 ‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç")
        hair_growth = st.radio("Hair growth ‡∏°‡∏µ‡∏Ç‡∏ô‡∏î‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ["Y", "N"]) 
        if HairG:
            st.image(HairG, caption="Ferriman Hair Growth Chart", use_container_width=True)
            
    with col2:       
        skin_dark = st.radio("üåë Skin darkening ‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡∏Ñ‡∏•‡πâ‡∏≥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ", ["Y", "N"])
        if Skindarken:
            st.image(Skindarken, caption="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏≠‡∏¢‡∏Ñ‡∏•‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢", use_container_width=True)
              
    with col3:
        pimples = st.radio("Pimples ‡∏°‡∏µ‡∏™‡∏¥‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ", ["Y", "N"])          
        fast_food = st.radio("üçî Fast food ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏ö‡πà‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ", ["Y", "N"])
        weight_gain = st.radio("üìà Weight gain ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", ["Y", "N"])
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ foll ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        foll_l = 0
        foll_r = 0
        
    st.markdown('</div>', unsafe_allow_html=True)  
def user_input_features():
    return {
        "age": age,
        "weight": weight,
        "cycle_ri": cycle_ri,
        "cycle_length": cycle_length,
        "hair_growth": hair_growth,
        "skin_dark": skin_dark,
        "pimples": pimples,
        "fast_food": fast_food,
        "foll_l": foll_l,
        "foll_r": foll_r,
        "weight_gain": weight_gain
    }
user_data = user_input_features()


st.set_page_config(page_title="PCOS Risk Assessment", page_icon="üß¨", layout="wide")
#st.write(user_data)
if st.button("üîç ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"):
    risk, prob = predict_risk(
        user_data["age"],
        user_data["weight"],
        user_data["cycle_ri"],
        user_data["cycle_length"],
        user_data["hair_growth"],
        user_data["skin_dark"],
        user_data["pimples"],
        user_data["fast_food"],
        user_data["foll_l"],
        user_data["foll_r"],
        user_data["weight_gain"]
    )
    st.markdown('<div class="risk-card">', unsafe_allow_html=True)
    st.subheader(f"üßæ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    st.success(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: **{risk}** ({prob:.2f}%)")
    if cycle_length >= 15:
        st.error("‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå (1‚Äì15 ‡∏ß‡∏±‡∏ô) **‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç**")

    # ‡πÅ‡∏ñ‡∏ö Progress bar (gradient style)
    progress_html = f"""
    <div style="background-color:#e0e0e0;border-radius:20px;height:25px;">
        <div style="width:{prob}%;background:linear-gradient(90deg,#6a11cb,#2575fc);
        height:25px;border-radius:20px;text-align:center;color:white;font-weight:bold;">
        {prob:.1f}%
        </div>
    </div>
    """
    st.markdown(progress_html, unsafe_allow_html=True)

    # Gauge Chart
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=prob,
        title={'text': "Risk Probability (%)", 'font': {'size': 22}},
        gauge={
            'axis': {'range': [0, 100], 'tickwidth': 2},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 33], 'color': "#90EE90"},
                {'range': [33, 66], 'color': "#FFD700"},
                {'range': [66, 100], 'color': "#FF6347"}
            ],
            'threshold': {
                'line': {'color': "black", 'width': 4},
                'thickness': 0.75,
                'value': prob
            }
        }
    ))
    st.plotly_chart(fig, use_container_width=True)
    
    st.info("üü¢ ‡∏ï‡πà‡∏≥ < 33%   |   üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á 33-66%   |   üî¥ ‡∏™‡∏π‡∏á > 66%")

# Section ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
with st.expander("üìù ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"):
    st.write("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏∞ üôè")
    st.markdown("[üëâ ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°](https://forms.gle/4Np3VBaY4aeN5Ws27)")



























